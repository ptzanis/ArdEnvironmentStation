V 14
1
LANG:1 0 
PANEL,-1 -1 919 492 N "_3DFace" 0
"main()
{
  if(!fwInstallation_reportReportShapeExists())
    return;
  
  gReportShape = fwInstallation_reportGetReportShape();//get shape of 'Installation info' and store it in a panel scope variable 
  
  setSeverityFilter(getCheckedSeverities());//initialize severity filter
  setComponentFilter(makeDynString());//initialize component filter
  
  //connect UI functions with 'Installation info' panel events
  uiConnect(\"showInstallationElapsedTime\", gReportShape, \"eventUpdateInstallationElapsedTime\");
  uiConnect(\"showInstallationInfo\", gReportShape, \"eventCurrentComponentChanged\");
  uiConnect(\"showInstallationLogMessages\", gReportShape, \"eventInstallationLogMessageAppended\");
  uiConnect(\"resetInstallationInfo\", gReportShape, \"eventStartReporting\");
  
  //initialize component tree and log table
  showInstallationInfo(0, 0, makeDynMapping());
  showInstallationLogMessages(0, makeMapping());
}














" 0
 E E E E 1 -1 -1 0  190 130
""0  1
E "#uses \"fwInstallation.ctl\"

/**=== Panel scope variables ===**/
shape gReportShape; /** Panel scope variable to store shape of 'Installation info' reference panel of main fwInstallation panel. 
                      * This shape is necessary to connect to events on that panel and to call public functions from ScopeLib of that panel.
                      * Shape is assigned in panel initialize script.
                      */
int lastMessageId = 0; //ID of the last message added to installation log table
dyn_int countLogMessagesTypes = makeDynInt(0, 0, 0); //Log messages counters (one for each severity type)
dyn_bool componentFilter, severityFilter; /* Component and severity filters. Boolean arrays that for each severity ID/component ID
                                           * indicates if messages with these IDs should be visible in the installation log table.
                                           * Note: Components IDs starts from 0 thus it is necessary to add +1 to the component ID 
                                           * to get corresponding field in a filter array. First index in componentFilter array is
                                           * used also to indicate if filtering is disabled (if true then all messages should be shown)
                                           * For indexing of severityFilter see SEVERITY_FILTER_* constants, also add +1 to their values.
                                           */


/**=== Private ScopeLib functions ===**/

/** Sets the severity filter mask.
  * @param filteredSeverities (in)  List of severity IDs for which filter mask is set to TRUE (visible), for the rest it is set to FALSE (hidden)
  */
setSeverityFilter(dyn_int filteredSeverities)
{
  for(int i=1;i<=SEVERITY_FILTER_LENGTH;i++)
    severityFilter[i] = (dynContains(filteredSeverities, i - 1) > 0);
}

/** Returns the severity filter mask.
  * @return Array of booleans, that for each severity ID indicates if log messages with that severity ID should be visible (TRUE) or hidden (FALSE).
  *         Note: For values of severity IDs see SEVERITY_FILTER_* constants, for corresponding field in an array it is necessary to add +1 to their value
  */
dyn_bool getSeverityFilter(){
  return severityFilter;
}

/** Sets the component filter mask.
  * @param filteredComponents (in)  List of component IDs for which filter mask is set to TRUE (visible), for the rest it is set to FALSE (hidden). 
  *        Note: when the provided list is empty then all fields are set to TRUE (filtering disabled)
           Note2: It is not possible to set directly filtering for component ID = 0 (first position in an array) - it is set to TRUE only when filtering is disabled
  */
setComponentFilter(dyn_string filteredComponents)
{
  bool areAllTrue = (dynlen(filteredComponents) == 0);
  int componentsNumber = gReportShape.getComponentsNumber();
  for(int i=1;i<=componentsNumber;i++)
    componentFilter[i] = (areAllTrue || dynContains(filteredComponents, (string)i));
  dynInsertAt(componentFilter, areAllTrue, 1);//to include componentId = 0
}

/** Returns the component filter mask.
  * @return Array of booleans, that for each comopnent ID indicates if log messages with that component ID should be visible (TRUE) or hidden (FALSE).
  *         Note: Since component IDs starts from 0 for corresponding field in an array it is necessary to add +1 to their value.
  */
dyn_bool getComponentFilter(){
  return componentFilter;
}

/** Appends new installation log message to the log table. Updates message counter per severity. 
  * @param installationLogMessage (in)  Mapping contains installation log message (ID of component and errClass log message)
  */
appendInstallationLogMessage(mapping installationLogMessage)
{
  string componentName, severity, message;
  int componentId, severityId;
  resolveInstallationLogMessage(installationLogMessage, componentId, componentName, severityId, severity, message);
  
  setSeverityCheckboxString(severityId, getSeverityMessageNumberString(severityId, ++countLogMessagesTypes[severityId + 1]));
  appendRowToInstallationLogTable(componentId, componentName, severityId, severity, message,
                                  matchLogMessageToFilter(componentId, severityId));
}

/** Severity filter constants: box index in cbSeverityFilter = severity ID **/
const int SEVERITY_FILTER_INFO = 0; //INFO checkbox index
const int SEVERITY_FILTER_WARNING = 1; //WARNING checkbox index
const int SEVERITY_FILTER_ERROR = 2; //ERROR checkbox index
const int SEVERITY_FILTER_LENGTH = SEVERITY_FILTER_ERROR + 1; //Number of checkboxes in cbSeverityFilter

/** Resolves message details from installation log message mapping.
  * @param installationLogMessage (in)  Mapping contains installation log message (ID of component and errClass log message)
  * @param componentId (out)  ID of component
  * @param componentName (out)  Component name
  * @param severityId (out)  Severity type ID
  * @param severity (out)  Severity type name
  * @param message (out)  Log message
  */
void resolveInstallationLogMessage(mapping installationLogMessage, int &componentId, string &componentName, int &severityId, string &severity, string &message)
{
  componentId = installationLogMessage[\"componentId\"];
  if(componentId > 0 && componentId <= dynlen(gReportShape.getComponentInstallationInfoMapping()))
    componentName = gReportShape.getComponentInstallationInfoMapping()[componentId][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_COMPONENT];
  else if(componentId == 0)
    componentName = \"Preparing installation\";
  else
    componentName = \"\";
  
  errClass logMessage = installationLogMessage[\"logMessage\"];
  switch(getErrorPriority(logMessage))
  {
    case PRIO_INFO: severityId = SEVERITY_FILTER_INFO; severity = \"INFO\"; break;
    case PRIO_WARNING: severityId = SEVERITY_FILTER_WARNING; severity = \"WARNING\"; break;
    case PRIO_SEVERE: severityId = SEVERITY_FILTER_ERROR; severity = \"ERROR\"; break;
    default: severityId = -1; severity = \"\"; break;
  }
  int errCode = getErrorCode(logMessage);
  string errCatalog = getErrorCatalog(logMessage);
  message = getErrorText(logMessage);
}

/** Checks if message with given severity ID and component ID matches the given filters state.
  * @param componentId (in)  Component ID of log message
  * @param severityId (in)  Severity type ID of log message
  * @param currComponentFilter (in)  Component filter boolean array, default is componentFilter scopeLib array
  * @param currSeverityFilter (in)  Severity filter boolean array, default is severityFilter scopeLib array
  * @return TRUE if both severity ID AND component ID match corresponding filter, FALSE if not
  */
bool matchLogMessageToFilter(int componentId, int severityId, dyn_bool currComponentFilter = getComponentFilter(), dyn_bool currSeverityFilter = getSeverityFilter())
{
  int componentFilterLen = dynlen(currComponentFilter);
  int severityFilterLen = dynlen(currSeverityFilter);
  //currComponentFilter[1] - if true then show all, otherwise show only filtered components
  bool match = currComponentFilter[1] || (componentId < componentFilterLen && currComponentFilter[componentId + 1]); // +1 as both componentId and severityId starts from 0
  match &= (severityId >= severityFilterLen) || currSeverityFilter[severityId + 1];
  return match;
}

/** Filters all messages in the log table according to provided filters.
  * @param currComponentFilter (in)  Component filter boolean array
  * @param currSeverityFilter (in)  Severity filter boolean array
  */
filterInstallationLogMessages(dyn_bool currComponentFilter, dyn_bool currSeverityFilter)
{
  int lineCount = getInstallationLogTableRows();
  for(int i=0;i<lineCount;i++)
  {
    int severityId, componentId;
    getInstallationLogTableRowMessageIds(i, severityId, componentId);
    setInstallationLogTableRowVisible(i, matchLogMessageToFilter(componentId, severityId, currComponentFilter, currSeverityFilter));
  }
}

/** Returns the severity checkbox label: severity type name and number of messages of this severity type
  * @param filterButton (in)  Index of checkbox in cbSeverityFilter
  * @param messagesCount (in)  Number of log messages (of this severity type) that is added to the label
  * @return String contains severity type name and number of log messages in parentheses eg. \"INFO (6)\"
  */
string getSeverityMessageNumberString(int filterButton, int messagesCount)
{
  string filterButtonText;
  switch(filterButton)
  {
    case SEVERITY_FILTER_INFO: filterButtonText = \"INFO\"; break;
    case SEVERITY_FILTER_WARNING: filterButtonText = \"WARNING\"; break;
    case SEVERITY_FILTER_ERROR: filterButtonText = \"ERROR\"; break;
  }
  if(messagesCount > 0)
    filterButtonText += \" (\" + (string)messagesCount + \")\";
  
  return filterButtonText;
}

/** Returns the string contains the ID of component that is being installed currently along with total number of components to be installed
  * @param componentId (in)  ID of component
  * @param componentsNumber (in)  Total number of components to be installed
  * @return String with ID of current component and total number of components delimited with \"/\" eg. \"2/5\"
  */
string getComponentNumberString(int componentId, int componentsNumber)
{
  return (string)componentId + \"/\" + (string)componentsNumber;
}

/** Returns the string contains the current stage number along with total number of stages to be performed during installation of a single component
  * @param stageNumber (in)  Current stage number
  * @return String with current stage number and total number of stages delimited with \"/\" eg. \"6/15\"
  */
string getStageNumberString(int stageNumber)
{
  if(stageNumber > 0 && stageNumber <= gReportShape.getTotalInstallationStages())
    return (string)stageNumber + \"/\" + (string)gReportShape.getTotalInstallationStages();
  
  DebugTN(\"Stage number: \" + (string)stageNumber  + \" outside range\");
  return \"\";  
}

/** Returns the string contains brief description of the given stage number
  * @param stageNumber (in)  Current stage number
  * @return String with description of given stage number eg. \"Copying files\" for stageNumber = 8
  */
string getStageDescriptionText(int stageNumber)
{
  switch(stageNumber)
  {
    case FW_INSTALLATION_REPORT_STEP_STARTING_INSTALLATION: return \"Preparing component installation\";
    case FW_INSTALLATION_REPORT_STEP_PARSING_XML: return \"Parsing component XML file\"; 
    case FW_INSTALLATION_REPORT_STEP_CHECKING_REQUIREMENTS: return \"Checking requirements\";
    case FW_INSTALLATION_REPORT_STEP_VERIFYING_COMPONENT_PACKAGE: return \"Component package verification\";
    case FW_INSTALLATION_REPORT_STEP_EXECUTING_PREINIT_SCRIPTS: return \"Pre-init scripts execution\";
    case FW_INSTALLATION_REPORT_STEP_INSTALLING_REQUIRED_COMPONENTS: return \"Installing required components\";
    case FW_INSTALLATION_REPORT_STEP_INSTALLING_SUBCOMPONENTS: return \"Installing sub-components\";
    case FW_INSTALLATION_REPORT_STEP_COPYING_FILES: return \"Copying files\";
    case FW_INSTALLATION_REPORT_STEP_IMPORTING_DPS: return \"Importing dplist files\";
    case FW_INSTALLATION_REPORT_STEP_CONFIGURING_PROJECT: return \"Configuring project\";
    case FW_INSTALLATION_REPORT_STEP_EXECUTING_INIT_SCRIPTS: return \"Init scripts execution\";
    case FW_INSTALLATION_REPORT_STEP_REGISTERING_INSTALLATION: return \"Registering installation\";
    case FW_INSTALLATION_REPORT_STEP_CALCULATING_SOURCE_FILES_HASHES: return \"Calculating source files hashes\";
    case FW_INSTALLATION_REPORT_STEP_VERIFYING_DEPENDENCIES: return \"Dependencies verification\";
    case FW_INSTALLATION_REPORT_STEP_REQUESTING_POSTINSTALLS: return \"Requesting post-installs\";
    case FW_INSTALLATION_REPORT_STEP_REGISTERING_INSTALLATION_IN_DB: return \"Registering installation in DB\";//optional step, only when project should be registered in DB
    default: DebugTN(\"Stage number: \" + stageNumber + \" outside range\");
  }
  return \"\";
}
/** IDs of component installation reason (stage of installation of parent component at which installation of current component was triggered) **/
const int FW_INSTALLATION_REPORT_INSTALLATION_REASON_REQUIRED = FW_INSTALLATION_REPORT_STEP_INSTALLING_REQUIRED_COMPONENTS; //Reason of installation: required component
const int FW_INSTALLATION_REPORT_INSTALLATION_REASON_SUBCOMPONENT = FW_INSTALLATION_REPORT_STEP_INSTALLING_SUBCOMPONENTS; //Reason of installation: subcomponent

/** Returns the string with reason of the component installation when this installation was triggered by another component
  * @param componentInstallationReason (in)  ID of the reason of component installation (stage of installation of parent component at which installation of current component was triggered)
  * @return String with reason of installation, it can be \"Required components\", \"Subcomponents\" or \"Unknown\" when reason ID doesn't match the previous ones
  */
string getComponentInstallationReasonDescription(int componentInstallationReason)
{
  switch(componentInstallationReason)
  {
    case FW_INSTALLATION_REPORT_INSTALLATION_REASON_REQUIRED: return \"Required components\";
    case FW_INSTALLATION_REPORT_INSTALLATION_REASON_SUBCOMPONENT: return \"Subcomponents\";
  }
  return \"Unknown\";
}

/**=== Callback functions connected with events ===**/

/** This function shows information about component installation. It displays currently installed component, the current stage
  * updates the progress bar and fills in the information in component tree.
  * @note It is connected with eventCurrentComponentChanged() event in 'Installation info' panel
  * @param componentId (in)  ID of the component
  * @param componentsNumber (in)  Number of total components to be installed
  * @param compInstallationInfo (in)  List of installation info mappings (one for each component)
  */
synchronized showInstallationInfo(int componentId, int componentsNumber, dyn_mapping compInstallationInfo)
{
  bool firstRun = isComponentTreeEmpty();//detect if this function is called for the first time after panel opening
  if(firstRun && componentId == 0)//This is for the case when funciton was called with dummy parameters during panel initialization to enforce update of installation info on the panel
  {//Then try to get real data from 'Installation info' panel
    componentId = gReportShape.getCurrentComponentId();
    componentsNumber = gReportShape.getComponentsNumber();
    compInstallationInfo = gReportShape.getComponentInstallationInfoMapping();
  }
  if(componentId <= 0)//safety check, don't do anything when componentId is not a positive value
    return;
 
  string componentName = compInstallationInfo[componentId][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_COMPONENT];
  int stageNumber = compInstallationInfo[componentId][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_STAGE];
  bool isComponentInstallationFinished = compInstallationInfo[componentId][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_FINISHED];
  bool isInstallationFinished = gReportShape.isInstallationFinished(compInstallationInfo);
  
  if(!isInstallationFinished)
    setComponentInfo(componentName, getComponentNumberString(componentId, componentsNumber));
  else
    setComponentInfo(\"Finished\", \"\");
  
  if(!isComponentInstallationFinished)
    setStageInfo(getStageDescriptionText(stageNumber), getStageNumberString(stageNumber));
  else
    setStageInfo(\"Finished\", \"\");
  
  updateProgressBar(gReportShape.getCompletedInstallationSteps(compInstallationInfo), componentsNumber);
  
  if(firstRun)//Function is called for the first time so the tree is empty. It is necessary to go through all components that are already in the array and show them in the tree.
  {
    int compInstallationInfoLen = dynlen(compInstallationInfo);
    for(int i=1;i<=compInstallationInfoLen;i++)
    {
      bool isNewItemCreated;
      setItemInComponentTree(i, compInstallationInfo[i][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_PARENT],
                             compInstallationInfo[i][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_COMPONENT],
                             compInstallationInfo[i][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_STAGE],
                             compInstallationInfo[i][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_REASON],
                             compInstallationInfo[i][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_FINISHED],
                             isNewItemCreated);
      if(isNewItemCreated)
        setComponentFilter(getSelectedItemsInComponentTree());//force update of component filter state when new item was added to the component tree
    }
  }
  else
  {
    bool isNewItemCreated;
    string parentId = compInstallationInfo[componentId][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_PARENT];
    int componentInstallationReason = compInstallationInfo[componentId][FW_INSTALLATION_REPORT_VARIABLE_INSTALATION_INFO_REASON];
    setItemInComponentTree(componentId, parentId, componentName, stageNumber, componentInstallationReason, isComponentInstallationFinished, isNewItemCreated);
    if(isNewItemCreated)
      setComponentFilter(getSelectedItemsInComponentTree());//force update of component filter state when new item was added to the component tree
  }
}

/** This function displays installation log messages in the log table. It appends new messages to the table and sets their visibility according to the current filters' state
  * @note It is connected with showInstallationLogMessages() event in 'Installation info' panel
  * @param messageId (in)  ID of message (position in an array of installation log messages)
  * @param installationLogMessage (in)  Mapping contains installation log message (ID of component and errClass log message)
  */
synchronized showInstallationLogMessages(int messageId, mapping installationLogMessage)
{
  if(isInstallationLogTableEmpty())//Function is called for the first time so the table is empty. It is necessary append log messages currently stored in 'Installation info' panel
  {
    dyn_mapping instLogMsg = gReportShape.getInstallationLogMessages();
    int instLogMsgLen = dynlen(instLogMsg);
    //Two cases possible here: 
    // 1) function was called during panel initialization with dummy values to enforce update of log table - then show all messages in the table
    // 2) showInstallationLogMessages() event occured before 1) so show log messages up to the one passed as an argument to the function (rest will be added in later calls)
    lastMessageId = (messageId == 0 || messageId > instLogMsgLen)?instLogMsgLen:messageId;
    for(int i=1;i<=lastMessageId;i++)
      appendInstallationLogMessage(instLogMsg[i]);
  }
  else if(messageId > lastMessageId)
  {
    appendInstallationLogMessage(installationLogMessage);
    lastMessageId = messageId;
  }
}

/** This function resets (clear) panel objects and panel scope cunter variables before new installation starts.
  * @note: It is connected with eventStartReporting() event in 'Installation info' panel.
  */
resetInstallationInfo()
{
  lastMessageId = 0;
  countLogMessagesTypes = makeDynInt(0, 0, 0);
  for(int i=0;i<SEVERITY_FILTER_LENGTH;i++)
    setSeverityCheckboxString(i, getSeverityMessageNumberString(i, countLogMessagesTypes[i + 1]));
  resetComponentTree();
  resetInstallationLogTable();
  resetComponentInfo();
  resetStageInfo();
  resetProgressBar();
  resetInstallationElapsedTime();
}

//elapsed time text field funtions
/** This function displays installation elapsed time on a panel.
  * @note It is connected with eventUpdateInstallationElapsedTime() event in 'Installation info' panel.
  * @param elapsedTimeString (in)  Elapsed installation time as a string with format mm:ss
  */
showInstallationElapsedTime(string elapsedTimeString)
{
  tfElapsedTime.text = elapsedTimeString;
}

/**=== UI functions ===**/

resetInstallationElapsedTime(){
  showInstallationElapsedTime(\"\");
}

//component info text fields functions
setComponentInfo(string componentName, string componentNumberString)
{
  tfCurrComponent.text = componentName;
  tfComponentNum.text = componentNumberString;
}

resetComponentInfo(){
  setComponentInfo(\"\",\"\");
}

//stage info text fields functions
setStageInfo(string stageDescriptionText, string stageNumberString)
{
  tfStageDesc.text = stageDescriptionText;
  tfStageNum.text = stageNumberString;
}

resetStageInfo(){
  setStageInfo(\"\",\"\");
}

//progress bar functions
updateProgressBar(int completedInstallationSteps, int componentsNumber)
{
  const int totalSteps = componentsNumber * gReportShape.getTotalInstallationStages();
  if(totalSteps == 0)
    return;
  
  pbInstallationProgress.progress((completedInstallationSteps * 100)/totalSteps);
}

resetProgressBar(){
  pbInstallationProgress.reset();
}

//component tree functions
bool isComponentTreeEmpty()
{
  return (TREE2.childCount() == 0);
}

dyn_string getSelectedItemsInComponentTree()
{
  dyn_string selectedComponents = TREE2.selectedItems();
  dynUnique(selectedComponents);
  int selectedComponentsLen = dynlen(selectedComponents);
  for(int i=1;i<=selectedComponentsLen;i++)
  {
    if(strpos(selectedComponents[i], \"_\") <= 0)
      continue;
    //add all childs of required components/subcomponents node
    dyn_string componentsToAppend = TREE2.children(selectedComponents[i]);
    dynAppend(selectedComponents, componentsToAppend);
  }
  dynUnique(selectedComponents);
  return selectedComponents;
}

setItemInComponentTree(string componentId, string parentId, string componentName, int stageNumber, int installationReason, bool isComponentInstallationFinished, bool &newItemCreated)
{
  //DebugTN(\"Setting Tree\", componentId, parentId, componentName, stageNumber, installationReason, isComponentInstallationFinished);
  newItemCreated = false;
  if(!TREE2.itemExists(componentId))
  {
    if(parentId == \"0\")
      TREE2.appendItem(\"\", componentId, componentName);
    else
    {
      string intermediateItemId = parentId + \"_\" + (string)installationReason;
      if(!TREE2.itemExists(intermediateItemId))
        TREE2.appendItem(parentId, intermediateItemId, getComponentInstallationReasonDescription(installationReason));
      TREE2.appendItem(intermediateItemId, componentId, componentName);
    }
    newItemCreated = true;
  }
  string stageNumberString = getStageNumberString(stageNumber);
  if(isComponentInstallationFinished)
    stageNumberString = \"Finished\";
    
  TREE2.setText(componentId, 1, stageNumberString);
  TREE2.setVisible(componentId, true);//force updating tree item
  TREE2.ensureItemVisible(componentId);
}

resetComponentTree()
{
  TREE2.clear();
}

//cbSeverityFilter functions
setSeverityCheckboxString(int filterButton, string severityCheckboxString)
{
  cbSeverityFilter.text(filterButton, severityCheckboxString);
}

dyn_int getCheckedSeverities()
{
  dyn_int checkedSeverities;
  for(int i=0;i<SEVERITY_FILTER_LENGTH;i++)
    if(cbSeverityFilter.state(i))
      dynAppend(checkedSeverities, i);
  return checkedSeverities;
}

//Log table functions
int getInstallationLogTableRows()
{
  return TABLE2.lineCount();
}

resetInstallationLogTable()
{
  TABLE2.deleteAllLines();
}

bool isInstallationLogTableEmpty()
{
  return (getInstallationLogTableRows() == 0);
}

appendRowToInstallationLogTable(int componentId, string componentName, int severityId, string severity, string message, bool visible = true)
{
  int rowToAppend = getInstallationLogTableRows();
  TABLE2.appendLine(\"component_id\", componentId, \"component\", componentName, \"severity_id\", severityId, \"severity\", severity, \"message\", message);
  if(!visible)
    setInstallationLogTableRowVisible(rowToAppend, false);
  TABLE2.adjustColumn(4);
}

getInstallationLogTableRowMessageIds(int row, int &severityId, int &componentId)
{
  severityId = TABLE2.cellValueRC(row, \"severity_id\");
  componentId = TABLE2.cellValueRC(row, \"component_id\");
}

setInstallationLogTableRowVisible(int row, bool visible)
{
  if(visible)
    TABLE2.showRow(row);
  else
    TABLE2.hideRow(row);
}






" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
25 2
"TABLE2"
""
1 276.9999999999999 170 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  274.9999999999999 168 904 481
EE 1 0 1 5 0 "component_id" 10 0 0 "s" 1
LANG:1 12 component_id
E
1
LANG:1 0 

120 "component" 10 1 1 "s" 1
LANG:1 14 Component name
E
1
LANG:1 0 

120 "severity_id" 6 0 0 "s" 1
LANG:1 11 severity_id
E
1
LANG:1 0 

80 "severity" 6 1 0 "s" 1
LANG:1 8 Severity
E
1
LANG:1 0 

80 "message" 33 1 0 "s" 1
LANG:1 7 Message
E
1
LANG:1 0 

380 
18 18 10 0
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
29 3
"TREE2"
""
1 13.85946745562126 138 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

3
"selectionMode" "enum 1"
"treeStepSize" "int 12"
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  13.85946745562126 138 252.8594674556213 480.0000000000001
10 TreeWidget
1
0 "selectionChanged" "(string id)"
"  setComponentFilter(getSelectedItemsInComponentTree());
  filterInstallationLogMessages(getComponentFilter(), getSeverityFilter());"
"main()
{
  this.addColumn(\"Component\");
  this.addColumn(\"Stage\");
}
" 0
14 4
"tfCurrComponent"
""
1 234.0432407828858 96 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  209.1420118343195 80 362 105
2 "0s" 0 0 0 0 0 -1  E E E
2 5
"PRIMITIVE_TEXT1"
""
1 142 83 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.121951219512195 0 1 -18.56097560975611 2 0 E 23 83 142 98
0 2 2 "0s" 0 0 0 194 0 0  142 83 1
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 20 Installing component
14 10
"tfStageDesc"
""
1 550.3665989578734 60 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  494 80 863 105
2 "0s" 0 0 0 0 0 -1  E E E
2 11
"PRIMITIVE_TEXT4"
""
1 390 85 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.311864406779662 0 1 -85.44067796610202 0 0 E 356 85 390 100
0 2 2 "0s" 0 0 0 194 0 0  390 85 1
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 5 Stage
14 12
"tfComponentNum"
""
1 158.1597633136095 96 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  148 80 205.0384615384615 105
2 "0s" 0 0 0 0 0 -1  E E E
14 13
"tfStageNum"
""
1 443.4703700432748 96 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  433.3106067296654 80 490.3490682681268 105
2 "0s" 0 0 0 0 0 -1  E E E
2 15
"PRIMITIVE_TEXT6"
""
1 170 40 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.163119571852503 0 1 84.35473287621586 4 0 E 77 40 170 55
0 2 2 "0s" 0 0 0 194 0 0  170 40 1
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 16 Overall progress
29 16
"pbInstallationProgress"
""
1 291.2189349112426 41.5 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  291.2189349112426 41.5 899.9999999999999 61.5
11 ProgressBar
0
E14 20
"tfElapsedTime"
""
1 115 55.00000000000001 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  104.8402366863905 39.00000000000001 161.878698224852 63.99999999999999
2 "0s" 0 0 0 0 0 -1  E E E
2 21
"PRIMITIVE_TEXT8"
""
1 -33 44 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.1625 0 1 -14.08750000000001 0 0 E 21 44 97 59
0 2 2 "0s" 0 0 0 66 0 0  97 44 1
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 12 Elapsed time
6 24
"bgRectangle"
""
1 20 530 E E E 1 E 1 E N "_Transparent" E N "FwInstallationCorporateColor" E E
 E E
24 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 0.7466283533925564 0 1 -0.7247521017616597 0 1 E -1 -1 1268 29
2 25
"title"
""
1 13.93380119732825 1 E E E 1 E 1 E N "white" E N "_Transparent" E E
 E E
25 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:10001 0 

5
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 1 0 1 E U  0 E 15.93380119732827 3 169 24
0 2 0 "0s" 0 0 0 192 0 0  15.93380119732827 3 1
2
LANG:1 26 Arial,-1,19,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,19,5,40,0,0,0,0,0
0 2
LANG:1 20 Installation Details
LANG:10001 47 JCOP Framework Installation Description Creator
20 26
"cbSeverityFilter"
""
1 393.0000000000001 132 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
26 0 0 0 0 0
E E E
0
1
LANG:1 0 

2
"layoutAlignment" "AlignNone"
"horizontal" ""
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  391.0000000000001 130 900.0000000000001 158.96
3
T 
1
LANG:1 4 INFO

1 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 7 WARNING

1 
1
LANG:1 0 
E E
0 0 0 0 0
T 
1
LANG:1 5 ERROR

1 
1
LANG:1 0 
E E
0 0 0 0 0
0
E"main(int button, int state)
{
  setSeverityFilter(getCheckedSeverities());
  filterInstallationLogMessages(getComponentFilter(), getSeverityFilter());
}









" 0
2 27
"PRIMITIVE_TEXT9"
""
1 142 83 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

4
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.291228070175438 0 1.04 151.3438596491229 50.36000000000003 0 E 96 83 142 98
0 2 2 "0s" 0 0 0 194 0 0  142 83 1
1
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0 1
LANG:1 8 Severity
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
